ѕроект веб-сервиса на Java Spring Boot: "Insurance Calculator". —ервис с помощью специальной формулы рассчитывает сумму страховки на основании параметров, вводимых клиентом в веб-форму. 
Ќекоторые параметры используютс€ в "чистом" виде, некоторые подлежат обработке, например, извлечению значени€ из базы данных по введенному клиентом ключу. 
¬ основе заключительной версии сервиса лежит гексагональна€ архитектура. –азработана система валидации пользовательского ввода. 
—ервис на прот€жении всего процесса разработки покрывалс€ unit-тестами. ¬се пользователи и введЄнные ими значени€ сохран€ютс€ в базу данных. 
Ѕаза данных сервиса создавалась и поддерживалась в актуальном состо€нии с помощью Liquibase. 
ƒл€ тестировани€ использовалась H2 in-memory база данных, а также дл€ тестировани€ rest api использовалс€ Postman (на начальных этапах), 
	а затем - автоматизированные тесты, отправл€ющие на контроллер тестовые запросы при помощи MockMVC. 
Ќа заключительных этапах разработки проводилось нагрузочное тестирование сервиса (Load Testing) в многопоточной среде. –азработана система логировани€ и сохранени€ логов.

¬ разработке примен€лись следующие технологии:
- Mockito
- Hibernate
- Liquibase
- Gradle
- Thymeleaf
- Lombock
- Logback
- Jackson

»спользовались паттерны:
- Factory
- Builder
- Hexagonal Architecture

ќбласти,  затронутые в процессе разработки:
- SQL базы данных, Jpa репозитории, ORM
- сети, в частности протокол http, GET и POST запросы и их обработка в Java
- JSON и XML, их обработка в Java. —ериализаци€ и десериализаци€ DTO
- основы разработки Spring Boot Application, реализаци€ IoC в Spring
- идентификаци€, UUID
- основы деплоймента артефактов (с помощью системы сборки Gradle)